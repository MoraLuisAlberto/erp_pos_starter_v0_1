name: CI
on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Create .env for CI
        run: |
          cat > .env <<'EOF'
          HOST=127.0.0.1
          PORT=8010
          DATABASE_URL=sqlite:///./erp.db
          PYTHONPATH=.
          EOF
          echo "Created .env:"
          cat .env

      - name: Prepare SQLite schema (apply SQLs, then fallback if needed)
        run: |
          rm -f erp.db
          python - <<'PY'
          import sqlite3, glob, os, sys, textwrap

          DB = 'erp.db'
          con = sqlite3.connect(DB)
          cur = con.cursor()

          # 1) Aplica todos los .sql (si existen)
          files = sorted(glob.glob('sql/*.sql') + glob.glob('db_migrations/*.sql'))
          print("SQL files to apply:", files or "(none)")
          for f in files:
            print("Applying", f)
            with open(f, 'r', encoding='utf-8') as fh:
              sql = fh.read()
            try:
              cur.executescript(sql)
            except Exception as e:
              print(f"⚠️  Error applying {f}: {e}")

          # 2) Si pos_session no existe, crea fallback mínimo
          def has_pos_session():
            cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='pos_session';")
            return cur.fetchone() is not None

          if not has_pos_session():
            print("pos_session not found after SQLs; creating minimal fallback schema…")
            cur.executescript(textwrap.dedent("""
              CREATE TABLE IF NOT EXISTS pos_session (
                id INTEGER PRIMARY KEY,
                store_id INTEGER NOT NULL,
                terminal_id INTEGER NOT NULL,
                user_open_id INTEGER NOT NULL,
                opened_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                status TEXT NOT NULL DEFAULT 'open',
                user_close_id INTEGER,
                closed_at TIMESTAMP,
                idempotency_open TEXT,
                idempotency_close TEXT,
                audit_ref TEXT,
                opened_by TEXT,
                closed_by TEXT,
                note TEXT,
                expected_cash REAL NOT NULL DEFAULT 0,
                counted_pre REAL NOT NULL DEFAULT 0,
                counted_final REAL NOT NULL DEFAULT 0,
                diff_cash REAL NOT NULL DEFAULT 0,
                tolerance REAL NOT NULL DEFAULT 0,
                idem_open TEXT,
                idem_close TEXT
              );
            """))

          # 3) Verificación estricta + diagnóstico si falla
          if not has_pos_session():
            print("❌ pos_session still missing. Listing tables:")
            cur.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
            for (t,) in cur.fetchall():
              print(" -", t)
            con.close()
            raise SystemExit(1)

          con.commit()
          con.close()
          print("✅ DB ready at", os.path.abspath(DB))
          PY

      - name: Start API via run.sh (background)
        run: |
          chmod +x scripts/run.sh
          bash scripts/run.sh > uvicorn.log 2>&1 &
          sleep 2

      - name: Wait for API readiness (/session/open -> 200/409)
        run: |
          for i in $(seq 1 30); do
            code=$(curl -s -o /dev/null -w '%{http_code}' \
              -H 'Content-Type: application/json' \
              -d '{"operator":"demo"}' \
              http://127.0.0.1:8010/session/open || true)
            echo "Attempt $i: /session/open -> $code"
            if [ "$code" = "200" ] || [ "$code" = "409" ]; then
              echo "API ready"; exit 0; fi
            sleep 1
          done
          echo "❌ API did not become ready"
          echo "---- uvicorn.log (tail) ----"
          tail -n 200 uvicorn.log || true
          exit 1

      - name: Run tests
        env:
          ERP_BASE_URL: http://127.0.0.1:8010
          TEST_COUPON: TEST10
        run: pytest -q -ra

      - name: Upload uvicorn.log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: uvicorn-log
          path: uvicorn.log
