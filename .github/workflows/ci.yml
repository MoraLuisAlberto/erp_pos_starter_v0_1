name: CI
on:
  push:
    branches: [develop, feature/**]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: .
      DATABASE_URL: sqlite:///./erp.db
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest requests uvicorn alembic

      - name: Prepare DB file
        run: |
          python - <<'PY'
          import pathlib, sqlite3
          p = pathlib.Path("erp.db")
          if not p.exists():
              sqlite3.connect("erp.db").close()
              print("Created SQLite DB")
          else:
              print("Using existing SQLite DB")
          PY

      - name: Migrate (Alembic if present)
        run: |
          if [ -f alembic.ini ]; then alembic upgrade head || true; fi

      - name: Fallback metadata.create_all (optional)
        run: |
          python - <<'PY' || true
          try:
              try:
                  from app.core.db import Base, engine
              except Exception:
                  from app.db import Base, engine
              Base.metadata.create_all(bind=engine)
              print("metadata.create_all done")
          except Exception as e:
              print("Skip metadata.create_all fallback:", e)
          PY

      - name: Seed demo data (optional)
        run: |
          python -m app.seed_demo || true
          python -m app.seed_coupon_demo || true

      - name: Bootstrap minimal fixtures (robusto)
        run: |
          python -m app.ops.bootstrap || true

      - name: Start API (background with logs)
        run: |
          python -m uvicorn app.main:app --host 127.0.0.1 --port 8010 --log-level debug > uvicorn.log 2>&1 &
          echo $! > uvicorn.pid

      - name: Wait for /health
        run: |
          for i in {1..40}; do
            if curl -fsS http://127.0.0.1:8010/health >/dev/null; then
              echo "API ready"; exit 0
            fi
            sleep 1
          done
          echo "API did not start in time"
          echo "==== uvicorn.log (tail) ===="
          tail -n 200 uvicorn.log || true
          exit 1

      - name: Smoke check /session/open (no-fail, imprime cuerpo)
        run: |
          echo '{"pos_id":1,"cashier_id":1,"opening_cash":0}' > /tmp/open.json
          code=$(curl -s -o /tmp/open_body.txt -w "%{http_code}" -H "Content-Type: application/json" -d @/tmp/open.json http://127.0.0.1:8010/session/open || true)
          echo "Status: $code"
          echo "---- /session/open body ----"
          cat /tmp/open_body.txt || true
          if [ "$code" -ne 200 ]; then
            echo "==== uvicorn.log (tail) ===="
            tail -n 400 uvicorn.log || true
          fi
          # No fallamos aqu√≠ para permitir que pytest capture todo el rastro
          true

      - name: Run tests
        run: pytest -q

      - name: On failure, show server log + DB schema
        if: ${{ failure() }}
        run: |
          echo "==== uvicorn.log (tail) ===="
          tail -n 500 uvicorn.log || true
          echo "==== SQLite schema dump ===="
          python - <<'PY' || true
          import sqlite3, json
          con=sqlite3.connect('erp.db'); con.row_factory=sqlite3.Row
          cur=con.cursor()
          tabs=[r[0] for r in cur.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")]
          print("TABLES:", tabs)
          for t in tabs:
              cols=[dict(row) for row in cur.execute(f"PRAGMA table_info('{t}')")]
              fks=[dict(zip([d[0] for d in cur.description], r)) for r in cur.execute(f"PRAGMA foreign_key_list('{t}')")]
              print(f"== {t} ==")
              print("COLUMNS:", json.dumps(cols, indent=2))
              print("FKS:", json.dumps(fks, indent=2))
          con.close()
          PY

      - name: Upload uvicorn.log artifact (always)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: uvicorn-log
          path: uvicorn.log
